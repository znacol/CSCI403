9/9/15
DDL: Creating Your Own Schema
	-**schema
		- container for database object
		- like namespaces
		 apply security policies independently
		- different applications
		- 'public'
	-**catalog
		- system tables

\d		# lets you view all tables in schema
\dS		# lets you view system tables

Table Creation:
	- CREATE TABLE schemaname.table_name
	CREATE TABLE name (column1_name column1_type [column_constraints], 
  		      column2_name column2_type [column_constraints],
		      ...
		      [table_constraints]
		      );
	- integer types
		INTEGER
	- decimal types (fixed precision)
		NUMERIC(width,precision)
		DECIMAL(w,p)
	- real
		REAL
		DOUBLE
	- boolean
		BOOLEAN
	- date/time
		DATE
		TIME
		TIMESTAMP 	# date and time
	- strings
		CHAR(n)		# takes in length of char
		VARCHAR(n)
		TEXT		# postgres feature
	- binary
		BYTEA		# e.g. for storing image, IP address		

	
	Workflow	
									9/11/15
	- Tables created infrequently
	- Easy to make mistakes
		1. Make scripts
			- table creation, populate with data, drop old tables
		2. Rerun until good results
	
	- CREATE TABLE AS: use prexisting or read only table (e.g. Project 2)
	CREATE TABLE schema.table_name (a1, a2,...,an) AS SELECT ...
		- Does not copy constraints over

Database Modification Commands
	INSERT, UPDATE, DELETE
	- Modification queries
	- Can fail (due to violation of constraint)

	**INSERT INTO table_name VALUES (v1, v2, ..., vn);
	INSERT INTO table_name (a1, a2,...am) VALUES (va1, va2,..,vam);
	INSERT INTO table_name (a1,a2,...,an) SELECT ...; (can use query\data from other table)

	**Example
	CREATE TABLE foo (id serial, bar test, baz date;
	INSERT INTO foo (bar, baz) VALUES ('apple','2010-01-30');
	INSERT INTO foo (baz) VALUES ('2003-03-11');

	**UPDATE table_name SET a1=value_a1 WHERE condition;

	Example:
	UPDATE foo SET baz='2015-09-11' WHERE baz IS NULL;

	DELETE FROM table_name WHERE condition;

Bulk Loading of Data
	- Options:
		1. Convert data into script:
			INSERT INTO table VALUES (...)
			INSERT ...
		2. Write a program to insert via API
		3. Bulk loader
			copy (postgres)
			e.g. copy table_name FROM 'filename' [WITH (option1, option2,...);
Subqueries (Nested Queries)
	- Execute a SELECT query, and use result in WHERE, FROM, SELECT of some outer query
	- Subquery result can be 0 or more rows
		- 1 row: interpet result as a value (tuple)
		- multiple rows- interpret as relation


	IN, NOT IN
		- when result is relation
		- IN tests for membership in result
	**Example
	SELECT course_id FROM mines_courses WHERE instructor IN (SELECT name FROM mines_eecs_faculty);

	SELECT * FROM mines_courses WHERE  (instr_first,instr_last) IN (SELECT first, last FROM mines_eecs_faculty);

	**Note: Equivalent to join query

	SELECT course_id FROM mines_courses AS mc, mines_eecs_faculty AS mef WHERE mc.instructor = mef.name;		# same as above query

	- "-, +, etc.": when result of subquery is a single row
	SELECT * FROM mines_eecs_faculty WHERE name = (SELECT instructor FROM mines_courses WHERE course_id='CSCI403');

	Correlated Subqueries
		- Using value from outer query in WHERE condition of subquery
	**Example
	SELECT instructor, course_id FROM mines_courses AS mc1 WHERE course_id IN (SELECT course_id FROM mines_courses AS mc2 WHERE mc2.course_id = mc1.course_id AND mc2.instructor <> mc1.instructor) ORDER BY course_id;

	- EXISTS, NOT EXISTS
	SELECT DISTINCT instructor, course_id FROM mines_coourses AS mc1 WHERE EXISTS (SELECT course_id FROM mines_courses AS mc2 WHERE mc2.course_id=mc1.course_id AND mc2.instructor <> mc1.instructor);

	- UNIQUE

	- Subqueries in FROM
		SELECT course_id FROM (SELECT * FROM mines_courses) AS mc WHERE mc.instructor='CPW';

	- Subqueries in SELECT
		SELECT (SELECT office FROM mines_eecs_faculty WHERE mef.name=mc.instructor) AS office, course_id, instructor FROM mines_courses as mc;

									9/15/15
Aggregate Functions and GROUP BY
	- Aggregate Functions: (all ignore nulls)
		- COUNT (e.g. COUNT (some column)
		- SUM
		- MAX
		- MIN
		- AVG (e.g. SELECT AVG(max_credits) FROM mines_courses;

	- Grouping: compute aggregates on subgroups of rows as organized by distinct values of some subset of attributes
		**Example: SELECT {grouping_values | aggregates}[...] FROM table_name WHERE conditional GROUP BY attribute;
		**Example: SELECT instructor, COUNT(*) FROM mines_courses WHERE course_id lie 'CSCI%' GROUP BY instructor ORDER BY count(*);
		- Can order by aggregates
		- SELECT begin_time, COUNT(*) FROM mines_courses_meetings WHERE days LIKE 'MWF' GROUP BY begin_time ORDER BY begin_time;
	

	- HAVING: like WHERE condition on the tuples resulting from the GROUP BY
		**Example: SELECT  instructor FROM mines_courses GROUP_BY instructor HAVING  count(*) > 5;

									9/18/15
Join Clauses
	- Alternative to WHERE clause joins
	**Example
	SELECT course_id, instructor, office FROM mines_courses INNER JOIN mines_eecs_faculty ON instructor=name; (INNER is optional)
	Equivalent to: SELECT ... FROM mines_courses, mines_eecs_faculty WHERE instructor = name; (inner join)

	- OUTER JOINS: lets us select all rows from one or both tables, matching up rows on the join condition wherever possible
	SELECT course_id, instructor, office FROM mines_courses LEFT OUTER JOIN mines_eecs_faculty ON instructor = name; (inlcudes all courses but only offices for eecs courses)

	-** Natural Join aka 'Equijoin': join where condition is implicit due ot attribute names matching in both tables (no ON clause)
	**Example
	SELECT * FROM mines_courses NATURAL JOIN mines_courses_meetings;

Set Operations
	- Relations are sets of tuples
	- Should be able to do set operations on relations (union, intersection, difference)
	- SQL: UNION, INTERSECTION, EXCEPT
	**Example
	SELECT * FROM mines_courses WHERE course_id LIKE 'CSCI%' UNION SELECT * FROM mines_courses WHERE course_id LIKE 'LAIS%';
	
		- Attributes number and type must match
		- Attribute names will come from first query
		-**Note: true set operations: result is a set (no duplicates) unless you add keyword ALL (Example SELECT ... UNION ALL SELECT ...)

More DDL
	- ALTER TABLE
		- Add a primary key: ALTER TABLE table_name ADD PRIMARY KEY (attr1, attr2,...);
		- Add a foreign key: ALTER TABLE table_name ADD FOREIGN KEY (attr1, attr2,...) REFERENCES table2 (attr1, attr2, ...);
		- Adding a column: ALTER TABLE table_name ADD COLUMN column_name type.			- REMOVE COLUMN

	- DROP
		- DROP object_type object_name; (TABLE, CONSTRAINT, SCHEMA)

	- VIEWS
		- Like a saved query with a name
		- CREATE VIEW view_name AS SELECT ...
		- Reruns query from underlying table
		- mines_courses_flattened
