CSCI 403: Database Management
Fall 2015
Colorado School of Mines
													8/28/15

Dabatase Management System (DBMS) Fundamentals:
	- self describing data
	- program-data separation (independence in book)
	- data abstraction
	- network/multiuser access (transaction control)
	- client/server architecture

History- Early Models
	- pre-1960s
	- 1962: term "database"
	- 1964: GE's IDS by Charles Bachman (Turing Award 1973)
		- network model
			- records	record-type
			- sets		set-type
		- CODASYL- standard in 1969
	- 1966-68: IBM's IMS (Information Management System for Apollo)
		- first hierarchial model DB
	- navigational model: both IDS and IMS
	- 1970: relational model (IBM's E.F. Codd)
	- 1977: System R (IBM)- SEQUEL -> SQL
	- 1977-79: Oracle
	- 1973: INGRES- Berkeley- Michael Stonebraker & Eugene Wong
		- 1985: Postgres
													8/31/15
	1960: navigational databases
	1970: relational model
	NoSQL
		- scalability
		- flexibility (JSON, XML)
		- fault tolerance
Relational Databases
	- Rows are called tuples
	- A relation is a set of tuples
	-** Tuple: collection of named/ordered values ('CPW', 'CSCI 403', 'Database Management', 3)
		- Attribute names: 		    (INSTRUCTOR, COURSE ID, TITLE, HOURS)
		- Domain: dom(INSTRUCTOR) = 'string'
			- may include NULL
	-** Relation schema:
		- R = R(A1, A2, ..., An)
		- Set of attributes to store in relation
		- R has degree n
		- Ai has domain dom(Ai)
	-** Relation (a.k.a. relation state):
		- A set of tuples consistent with relation schema
		-r(R) is a subset of (dom(A1) * dom(A2) * ... * dom(An)

	Note: "relation is a set" -> no ordering of tuple in relation
		also -> no duplicates (* in practice)
	Note: "attributes are set" ->ordering of sttributes in a relation doesn't matter



----------------------------------------------------------------------------------------------			9/4/15
Chapter 5: Basic SQL

Constraints
	- A restriction on a relation or set of relations
	- Three Categories
		- Implicit: not enforced, but assumed. (i.e. assume instructor name is the name of a person and not a book title)
		- Explicit: enforced by database schema 
		- Application: enforced by application code (business rules)

	- Domain Constraints: type constraints, not NULL constraint

	- Key Constraints: primary key (not Null), referential integrity ("foreign key")

		-Super Key: subset of attributes of relational schema R such that no two tuples in any relation r(R) share exact same values for the attributes
		-Key: "a minimal super key"; a super key such that the removal of any attribute of the key makes it no longer a super key
		-Candidate Keys: pick one -> "primary key"
	- Referential Integrity: kind of like creating enumerated types (only a finite amount of allowed values)

| course_id | section | title           | instructor | crn |
| CSCI262   |	A     | Data Structures | CPW	     | 1   |
| CSCI262   |	B     | Data Structures | CPW	     | 2   |
| CSCI403   |	A     | Databases       | CPW	     | 3   |
| CSCI406   |	A     | Algorithms      | Mehta      | 4   |

(course_id, section, title) is a superkey
(course_id, section) is just a key
(crn) is just a key

SELECT attributes FROM table_name;
	e.g. SELECT * FROM mines_courses;
	     SELECT course_id, section FROM mines_courses;
	- Projection attributes are the ones Selected

SELECT attributes FROM tablename WHERE condition;
	- Adding the WHERE clause adds a boolean expression
	e.g. csci403=> select course_id FROM mines_courses WHERE instructor='Painter-Wakefield, Christopher';
		 course_id 
		-----------
		 CSCI262
		 CSCI262
		 CSCI403
		(3 rows)
	<> means not equal in SQL. Can AND and/or OR for compound expressions as well.
	
	e.g. csci403=> select course_id FROM mines_courses WHERE instructor LIKE 'Painter%';
		 course_id 
		-----------
		 CSCI262
		 CSCI262
		 CSCI403
		(3 rows)

	LIKE keyword for regex matching string values. % is "starting with." _ is a one character wildcard

Functions
	aliasing -> "AS" keyword


	SELECT attributes, attributes2, ..., attributesN
	FROM table_name1, table_name2, ..., table_nameM
	WHERE condition;

	SELECT DISTINCT instructor FROM mines_courses;
	DISTINCT will only return distinct attribute values (no repeats)

	SELECT ... FROM ... WHERE ... ORDER BY attribute, attribute2, etc.
	ORDER BY defaults ascending sort BY the attributes specified in the order specified

	ORDER BY instructor DESC = descending instructor (alphabetic) order

conditions
================================================
	instructor LIKE 'Painter%'
		% : starts-with
	NULL values cannot be compared

	SELECT mines_courses.crn, mines_courses.course_id, mines_courses.section
	FROM mines_courses
	WHERE instructor LIKE 'Painter%';

is the same as

	SELECT mc.crn, mc.course_id, mc.section
	FROM mines_courses AS mc
	WHERE instructor LIKE 'Painter%';

querying multiple tables
	SELECT * FROM mines_courses, mines_eecs_faculty;
		result: cartesian product/cross product of tables is then queried
		cross product is not actually "forced" => more optimal

	SELECT crn, instructor, course_id, email
	FROM mines_courses AS mc, mines_eecs_faculty AS mef
	WHERE mc.instructor=mef.name AND mc.instructor LIKE 'Painter%';
													9/9/15
DDL: Creating Your Own Schema
	-**schema
		- container for database object
		- like namespaces
		 apply security policies independently
		- different applications
		- 'public'
	-**catalog
		- system tables

\d		# lets you view all tables in schema
\dS		# lets you view system tables

Table Creation:
	- CREATE TABLE schemaname.table_name
	CREATE TABLE name (column1_name column1_type [column_constraints], 
  		      column2_name column2_type [column_constraints],
		      ...
		      [table_constraints]
		      );
	- integer types
		INTEGER
	- decimal types (fixed precision)
		NUMERIC(width,precision)
		DECIMAL(w,p)
	- real
		REAL
		DOUBLE
	- boolean
		BOOLEAN
	- date/time
		DATE
		TIME
		TIMESTAMP 	# date and time
	- strings
		CHAR(n)		# takes in length of char
		VARCHAR(n)
		TEXT		# postgres feature
	- binary
		BYTEA		# e.g. for storing image, IP address		

	
	Workflow	
									9/11/15
	- Tables created infrequently
	- Easy to make mistakes
		1. Make scripts
			- table creation, populate with data, drop old tables
		2. Rerun until good results
	
	- CREATE TABLE AS: use prexisting or read only table (e.g. Project 2)
	CREATE TABLE schema.table_name (a1, a2,...,an) AS SELECT ...
		- Does not copy constraints over

Database Modification Commands
	INSERT, UPDATE, DELETE
	- Modification queries
	- Can fail (due to violation of constraint)

	**INSERT INTO table_name VALUES (v1, v2, ..., vn);
	INSERT INTO table_name (a1, a2,...am) VALUES (va1, va2,..,vam);
	INSERT INTO table_name (a1,a2,...,an) SELECT ...; (can use query\data from other table)

	**Example
	CREATE TABLE foo (id serial, bar test, baz date;
	INSERT INTO foo (bar, baz) VALUES ('apple','2010-01-30');
	INSERT INTO foo (baz) VALUES ('2003-03-11');

	**UPDATE table_name SET a1=value_a1 WHERE condition;

	Example:
	UPDATE foo SET baz='2015-09-11' WHERE baz IS NULL;

	DELETE FROM table_name WHERE condition;

Bulk Loading of Data
	- Options:
		1. Convert data into script:
			INSERT INTO table VALUES (...)
			INSERT ...
		2. Write a program to insert via API
		3. Bulk loader
			copy (postgres)
			e.g. copy table_name FROM 'filename' [WITH (option1, option2,...);
Subqueries (Nested Queries)
	- Execute a SELECT query, and use result in WHERE, FROM, SELECT of some outer query
	- Subquery result can be 0 or more rows
		- 1 row: interpet result as a value (tuple)
		- multiple rows- interpret as relation


	IN, NOT IN
		- when result is relation
		- IN tests for membership in result
	**Example
	SELECT course_id FROM mines_courses WHERE instructor IN (SELECT name FROM mines_eecs_faculty);

	SELECT * FROM mines_courses WHERE  (instr_first,instr_last) IN (SELECT first, last FROM mines_eecs_faculty);

	**Note: Equivalent to join query

	SELECT course_id FROM mines_courses AS mc, mines_eecs_faculty AS mef WHERE mc.instructor = mef.name;		# same as above query

	- "-, +, etc.": when result of subquery is a single row
	SELECT * FROM mines_eecs_faculty WHERE name = (SELECT instructor FROM mines_courses WHERE course_id='CSCI403');

	Correlated Subqueries
		- Using value from outer query in WHERE condition of subquery
	**Example
	SELECT instructor, course_id FROM mines_courses AS mc1 WHERE course_id IN (SELECT course_id FROM mines_courses AS mc2 WHERE mc2.course_id = mc1.course_id AND mc2.instructor <> mc1.instructor) ORDER BY course_id;

	- EXISTS, NOT EXISTS
	SELECT DISTINCT instructor, course_id FROM mines_coourses AS mc1 WHERE EXISTS (SELECT course_id FROM mines_courses AS mc2 WHERE mc2.course_id=mc1.course_id AND mc2.instructor <> mc1.instructor);

	- UNIQUE

	- Subqueries in FROM
		SELECT course_id FROM (SELECT * FROM mines_courses) AS mc WHERE mc.instructor='CPW';

	- Subqueries in SELECT
		SELECT (SELECT office FROM mines_eecs_faculty WHERE mef.name=mc.instructor) AS office, course_id, instructor FROM mines_courses as mc;

									9/15/15
Aggregate Functions and GROUP BY
	- Aggregate Functions: (all ignore nulls)
		- COUNT (e.g. COUNT (some column)
		- SUM
		- MAX
		- MIN
		- AVG (e.g. SELECT AVG(max_credits) FROM mines_courses;

	- Grouping: compute aggregates on subgroups of rows as organized by distinct values of some subset of attributes
		**Example: SELECT {grouping_values | aggregates}[...] FROM table_name WHERE conditional GROUP BY attribute;
		**Example: SELECT instructor, COUNT(*) FROM mines_courses WHERE course_id lie 'CSCI%' GROUP BY instructor ORDER BY count(*);
		- Can order by aggregates
		- SELECT begin_time, COUNT(*) FROM mines_courses_meetings WHERE days LIKE 'MWF' GROUP BY begin_time ORDER BY begin_time;
	

	- HAVING: like WHERE condition on the tuples resulting from the GROUP BY
		**Example: SELECT  instructor FROM mines_courses GROUP_BY instructor HAVING  count(*) > 5;
